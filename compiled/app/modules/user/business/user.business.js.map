{"version":3,"sources":["../../../../../src/app/modules/user/business/user.business.js"],"names":["registration","data","body","userExist","User","findOne","email","message","duplicateEmail","validatePasssword","password","invalidPassword","acceptTerms","name","userRequired","user","response","save","result","status","userRegistered","login","userNotFound","passworNotSet","verifiedPassword","invalidCredentials","token","loggedIn","sociallogin","isGoogle","id","isFacebook","isLinkedln","isTwitter","invalidUser","registerUser","loggedUser","findByIdAndUpdate","_id","$set","new","module","exports"],"mappings":"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","file":"user.business.js","sourcesContent":["import { msg as message } from \"../../../../config/messages\";\r\nimport { password_validator } from \"./validation.business\";\r\nimport { User } from \"../models/user.model\";\r\nimport { pickUserProfileResponse, pickRegistrationData, pickRegistrationResponse, pickUserCredentials, pickSociailAccountCredentials } from \"../../../helpers/pickResponse.helper\";\r\nimport { compare } from \"bcrypt\";\r\nimport { generateAuthToken } from \"../../../util/generate.token\";\r\nimport { socialloginResonse } from \"../../../helpers/commonResponse.helper\";\r\n\r\n\r\n// registration\r\nconst registration = async (data) => {\r\n    let body = pickRegistrationData(data);\r\n\r\n    let userExist = await User.findOne({ email: body.email })\r\n    if (userExist) {\r\n        throw message.duplicateEmail\r\n    }\r\n    let validatePasssword = await password_validator(body.password)\r\n    if (!validatePasssword) {\r\n        throw message.invalidPassword\r\n    }\r\n    if (!body.acceptTerms) {\r\n        throw message.acceptTerms\r\n    }\r\n    if (!body.name) {\r\n        throw message.userRequired\r\n    }\r\n    let user = new User(body);\r\n    let response = await user.save()\r\n    if (response)\r\n        return {\r\n            result: pickRegistrationResponse(response),\r\n            status: 200,\r\n            message: message.userRegistered\r\n        };\r\n};\r\n\r\n\r\n// login\r\nconst login = async (data) => {\r\n    var body = pickUserCredentials(data);\r\n\r\n    let user = await User.findOne({ email: body.email })\r\n    if (!user) {\r\n        throw message.userNotFound;\r\n    }\r\n    if (!user.password) {\r\n        throw message.passworNotSet\r\n    }\r\n    let verifiedPassword = await compare(body.password, user.password)\r\n\r\n    if (!verifiedPassword) {\r\n        throw message.invalidCredentials\r\n    } else {\r\n        return {\r\n            result: pickUserProfileResponse(user),\r\n            status: 200,\r\n            token: await generateAuthToken(user),\r\n            message: message.loggedIn\r\n        };\r\n    }\r\n}\r\n\r\n\r\n//social login\r\nconst sociallogin = async (data) => {\r\n    var body = pickSociailAccountCredentials(data);\r\n    if (body.isGoogle) {\r\n        body['googleData'] = {\r\n            id: data.id\r\n        }\r\n    } else if (body.isFacebook) {\r\n        body['facebookData'] = {\r\n            id: data.id\r\n        }\r\n    } else if (body.isLinkedln) {\r\n        body['linkedlnData'] = {\r\n            id: data.id\r\n        }\r\n    } else if (body.isTwitter) {\r\n        body['twitterData'] = {\r\n            id: data.id\r\n        }\r\n    } else {\r\n        throw message.invalidUser\r\n    }\r\n    let userExist = await User.findOne({ email: body.email })\r\n    if (!userExist) {\r\n        let user = new User(body);\r\n        let registerUser = await user.save()\r\n        if (registerUser) {\r\n            return await socialloginResonse(registerUser)\r\n        }\r\n    } else if ((body.isGoogle && userExist.isGoogle) || (body.isTwitter && userExist.isTwitter) || (body.isFacebook && userExist.isFacebook) || (body.isLinkedln && userExist.isLinkedln)) {\r\n        return await socialloginResonse(userExist)\r\n\r\n    } else {\r\n        let loggedUser = await User.findByIdAndUpdate(userExist._id, { $set: body }, { new: true })\r\n        if (loggedUser) {\r\n            return await socialloginResonse(loggedUser)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n    registration,\r\n    login,\r\n    sociallogin\r\n};"]}