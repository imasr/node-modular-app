{"version":3,"sources":["../../../../../src/app/modules/user/models/user.model.js"],"names":["mongoose","require","validator","bcrypt","UserSchema","Schema","name","type","String","required","phone","Number","unique","sparse","email","trim","minlength","validate","isEmail","message","lowercase","password","isGoogle","isFacebook","isLinkedln","isTwitter","acceptTerms","Boolean","facebookData","JSON","googleData","linkedlnData","twitterData","timestamps","versionKey","pre","next","genSalt","err","salt","hash","User","model","module","exports"],"mappings":"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","file":"user.model.js","sourcesContent":["const mongoose = require(\"mongoose\");\r\nconst validator = require(\"validator\");\r\nconst bcrypt = require(\"bcrypt\");\r\n\r\nconst UserSchema = new mongoose.Schema(\r\n    {\r\n        name: {\r\n            type: String,\r\n            required: [true, 'Name is Required']\r\n        },\r\n        phone: {\r\n            type: Number,\r\n            unique: true,\r\n            sparse: true\r\n        },\r\n        email: {\r\n            type: String,\r\n            unique: true,\r\n            required: true,\r\n            sparse: true,\r\n            trim: true,\r\n            minlength: 1,\r\n            validate: {\r\n                validator: validator.isEmail,\r\n                message: \"{VALUE} is not a valid email\"\r\n            },\r\n            lowercase: true\r\n        },\r\n        password: {\r\n            type: String,\r\n            required: function () {\r\n                if (!!this.isGoogle || !!this.isFacebook || !!this.isLinkedln || !!this.isTwitter) {\r\n                    return false\r\n                }\r\n                return false\r\n            },\r\n            minlength: 8\r\n        },\r\n        acceptTerms: {\r\n            type: Boolean,\r\n            required: function () {\r\n                if (!!this.isGoogle || !!this.isFacebook || !!this.isLinkedln || !!this.isTwitter) {\r\n                    return false\r\n                }\r\n                return false\r\n            }\r\n        },\r\n        isGoogle: {\r\n            type: Boolean,\r\n        },\r\n        isFacebook: {\r\n            type: Boolean,\r\n        },\r\n        isLinkedln: {\r\n            type: Boolean,\r\n        },\r\n        isTwitter: {\r\n            type: Boolean,\r\n        },\r\n        facebookData: {\r\n            type: JSON,\r\n            required: function () {\r\n                return this.isFacebook == true;\r\n            }\r\n        },\r\n        googleData: {\r\n            type: JSON,\r\n            required: function () {\r\n                return this.isGoogle == true;\r\n            }\r\n        },\r\n        linkedlnData: {\r\n            type: JSON,\r\n            required: function () {\r\n                return this.isLinkedln == true;\r\n            }\r\n        },\r\n        twitterData: {\r\n            type: JSON,\r\n            required: function () {\r\n                return this.isTwitter == true;\r\n            }\r\n        }\r\n    }, {\r\n        timestamps: true,\r\n        versionKey: false\r\n    }\r\n);\r\n\r\nUserSchema.pre('save', function (next) {\r\n    if (!!this.password) {\r\n        bcrypt.genSalt(10, (err, salt) => {\r\n            bcrypt.hash(this.password, salt, (err, hash) => {\r\n                if (err) {\r\n                    return next(err);\r\n                }\r\n                this.password = hash;\r\n                next();\r\n            });\r\n        });\r\n    } else {\r\n        next();\r\n    }\r\n});\r\n\r\n\r\nvar User = mongoose.model(\"User\", UserSchema);\r\n\r\n\r\nmodule.exports = {\r\n    User\r\n};\r\n"]}